# # Search
# type _Schema_
#   # Token
#   @fulltext(
#     name: "tokenSearch"
#     language: en
#     algorithm: rank
#     include: [{ entity: "Token", fields: [{ name: "id" }, { name: "name" }, { name: "symbol" }] }]
#   )
#   # Pair
#   @fulltext(
#     name: "pairSearch"
#     language: en
#     algorithm: rank
#     include: [{ entity: "Pair", fields: [{ name: "id" }, { name: "name" }] }]
#   )
#   # User
#   @fulltext(name: "userSearch", language: en, algorithm: rank, include: [{ entity: "User", fields: [{ name: "id" }] }])

# User
type User @entity {
  # Address
  id: ID!

  # Liquidity Positions
  liquidityPositions: [LiquidityPosition!]! @derivedFrom(field: "user")
}

# Bundle
type Bundle @entity {
  id: ID!

  # price of ETH usd
  ethPrice: BigDecimal! @parallel(step: 4)
}

# Factory
type Factory @entity {
  # Contract address
  id: ID!

  # Pair count
  pairCount: BigInt! @parallel(step: 1, type: SUM)

  # Volume USD
  volumeUSD: BigDecimal! @parallel(step: 4, type: SUM)

  # Volume ETH
  volumeETH: BigDecimal! @parallel(step: 4, type: SUM)

  # Untracked volume
  untrackedVolumeUSD: BigDecimal! @parallel(step: 4, type: SUM)

  # Liquidity USD
  liquidityUSD: BigDecimal! @parallel(step: 4)

  # Liquidity ETH
  liquidityETH: BigDecimal! @parallel(step: 4)

  # Transaction count
  txCount: BigInt! @parallel(step: 4, type: SUM)

  # Token count
  tokenCount: BigInt! @parallel(step: 4, type: SUM)

  # User count
  userCount: BigInt! @parallel(step: 4, type: SUM)

  # Pairs
  pairs: [Pair!]! @derivedFrom(field: "factory")

  # Tokens
  tokens: [Token!]! @derivedFrom(field: "factory")

  # Hour data
  hourData: [HourData!]! @derivedFrom(field: "factory")

  # Day data
  dayData: [DayData!]! @derivedFrom(field: "factory")
}

# Hour Data
type HourData @entity {
  # start of hour timestamp
  id: ID!

  # date
  date: Int! @parallel(step: 4)

  # factory
  factory: Factory!

  # volume
  volumeETH: BigDecimal! @parallel(step: 4, type: SUM)
  volumeUSD: BigDecimal! @parallel(step: 4, type: SUM)
  untrackedVolume: BigDecimal! @parallel(step: 4, type: SUM)

  # liquidity
  liquidityETH: BigDecimal! @parallel(step: 4)
  liquidityUSD: BigDecimal! @parallel(step: 4)

  # tx count
  txCount: BigInt! @parallel(step: 4, type: SUM)
}

# Day Data
type DayData @entity {
  # timestamp / 86400
  id: ID!

  # date
  date: Int! @parallel(step: 4)

  # factory
  factory: Factory!

  # volume
  volumeETH: BigDecimal! @parallel(step: 4, type: SUM)
  volumeUSD: BigDecimal! @parallel(step: 4, type: SUM)
  untrackedVolume: BigDecimal! @parallel(step: 4, type: SUM)

  # liquidity
  liquidityETH: BigDecimal! @parallel(step: 4)
  liquidityUSD: BigDecimal! @parallel(step: 4)

  # tx count
  txCount: BigInt! @parallel(step: 4, type: SUM)
}

# Token
type Token @entity {
  # token address
  id: ID!

  # factory
  factory: Factory!

  # mirrored from the smart contract
  symbol: String! @parallel(step: 1)
  name: String! @parallel(step: 1)
  decimals: BigInt! @parallel(step: 1)

  # used for other stats like marketcap
  totalSupply: BigInt!  @parallel(step: 4, type: SUM)

  # token specific volume
  volume: BigDecimal!  @parallel(step: 4, type: SUM)
  volumeUSD: BigDecimal! @parallel(step: 4, type: SUM) @sql(index: false)
  untrackedVolumeUSD: BigDecimal!  @parallel(step: 4, type: SUM)

  # transactions across all pairs
  txCount: BigInt!  @parallel(step: 4, type: SUM)

  # liquidity across all pairs
  liquidity: BigDecimal!  @parallel(step: 4, type: SUM)

  derivedETH: BigDecimal! @parallel(step: 4)

  whitelistPairs: [Pair!]! @parallel(step: 1)

  # Token hour data
  hourData: [TokenHourData!]! @derivedFrom(field: "token")

  # Token day data
  dayData: [TokenDayData!]! @derivedFrom(field: "token")

  # Base pairs
  basePairs: [Pair!]! @derivedFrom(field: "token0")

  # Quote pairs
  quotePairs: [Pair!]! @derivedFrom(field: "token1")

  # Base pairs day data
  basePairsDayData: [PairDayData!]! @derivedFrom(field: "token0")

  # Quote pairs day data
  quotePairsDayData: [PairDayData!]! @derivedFrom(field: "token1")
}

# Token hour data
type TokenHourData @entity {
  # token id - hour start timestamp
  id: ID!

  # date - hour start timestamp
  date: Int! @parallel(step: 4)

  # token
  token: Token! @parallel(step: 4)

  # volume
  volume: BigDecimal! @parallel(step: 4, type: SUM)
  volumeETH: BigDecimal! @parallel(step: 4, type: SUM)
  volumeUSD: BigDecimal! @parallel(step: 4, type: SUM)

  # tx count
  txCount: BigInt! @parallel(step: 4, type: SUM)

  # liquidity
  liquidity: BigDecimal! @parallel(step: 4)
  liquidityETH: BigDecimal! @parallel(step: 4)
  liquidityUSD: BigDecimal! @parallel(step: 4)

  # price usd
  priceUSD: BigDecimal! @parallel(step: 4)
}

# Token day data
type TokenDayData @entity {
  # token id - day start timestamp
  id: ID!

  # date - day start timestamp
  date: Int! @parallel(step: 4)

  # token
  token: Token! @parallel(step: 4)

  # volume
  volume: BigDecimal! @parallel(step: 4, type: SUM)
  volumeETH: BigDecimal! @parallel(step: 4, type: SUM)
  volumeUSD: BigDecimal! @parallel(step: 4, type: SUM)

  # tx count
  txCount: BigInt! @parallel(step: 4, type: SUM)

  # liquidity
  liquidity: BigDecimal! @parallel(step: 4)
  liquidityETH: BigDecimal! @parallel(step: 4)
  liquidityUSD: BigDecimal! @parallel(step: 4)

  # price usd
  priceUSD: BigDecimal! @parallel(step: 4)
}

# Pair
type Pair @entity {
  # Contract address
  id: ID!

  # Factory
  factory: Factory!

  # Name
  name: String! @parallel(step: 1)

  # mirrored from the smart contract
  token0: Token! @parallel(step: 1)
  token1: Token! @parallel(step: 1)

  reserve0: BigDecimal! @parallel(step: 2)
  reserve1: BigDecimal! @parallel(step: 2)
  totalSupply: BigDecimal! @parallel(step: 4, type: SUM)

  # derived liquidity
  reserveETH: BigDecimal! @parallel(step: 3)
  reserveUSD: BigDecimal! @parallel(step: 3) @sql(index: false)

  # used for separating per pair reserves and global
  trackedReserveETH: BigDecimal! @sql(index: false)

  # Price in terms of the asset pair
  token0Price: BigDecimal! @parallel(step: 2)
  token1Price: BigDecimal! @parallel(step: 2)

  # lifetime volume stats
  volumeToken0: BigDecimal! @parallel(step: 4, type: SUM)
  volumeToken1: BigDecimal! @parallel(step: 4, type: SUM)
  volumeUSD: BigDecimal! @parallel(step: 4, type: SUM) @sql(index: false)
  untrackedVolumeUSD: BigDecimal!  @parallel(step: 4, type: SUM)
  txCount: BigInt!  @parallel(step: 4, type: SUM)

  # Fields used to help derived relationship
  # used to detect new exchanges
  liquidityProviderCount: BigInt! @parallel(step: 4, type: SUM)

  # lca: BigDecimal!
  # lcad: BigDecimal!

  # Liquidity positions
  liquidityPositions: [LiquidityPosition!]! @derivedFrom(field: "pair")

  # Liquidity position snapshots
  liquidityPositionSnapshots: [LiquidityPositionSnapshot!]! @derivedFrom(field: "pair")

  # Pair day data
  dayData: [PairDayData!]! @derivedFrom(field: "pair")

  # Pair hour data
  hourData: [PairHourData!]! @derivedFrom(field: "pair")

  # Transactions
  mints: [Mint!]! @derivedFrom(field: "pair")
  burns: [Burn!]! @derivedFrom(field: "pair")
  swaps: [Swap!]! @derivedFrom(field: "pair")

  # Created at
  timestamp: BigInt! @parallel(step: 1)
  block: BigInt! @parallel(step: 1)
}

# Pair hour data
type PairHourData @entity {
  # pair.id - hour start timestamp
  id: ID!

  # date - hour start timestamp
  date: Int! @parallel(step: 4)

  # pair
  pair: Pair! @parallel(step: 4)

  # reserves
  reserve0: BigDecimal! @parallel(step: 4)
  reserve1: BigDecimal! @parallel(step: 4)

  # derived liquidity
  reserveUSD: BigDecimal!

  # volume
  volumeToken0: BigDecimal! @parallel(step: 4, type: SUM)
  volumeToken1: BigDecimal! @parallel(step: 4, type: SUM)

  # volume usd
  volumeUSD: BigDecimal! @parallel(step: 4, type: SUM)

  # tx count
  txCount: BigInt! @parallel(step: 4, type: SUM)
}

# Pair day data
type PairDayData @entity {
  # pair id - day start timestamp
  id: ID!

  # date - day start timestamp
  date: Int! @parallel(step: 4)

  # pair
  pair: Pair! @parallel(step: 4)

  # token0
  token0: Token! @parallel(step: 4)

  # token1
  token1: Token! @parallel(step: 4)

  # reserves
  reserve0: BigDecimal! @parallel(step: 4)
  reserve1: BigDecimal! @parallel(step: 4)

  # total supply for LP historical returns
  totalSupply: BigDecimal! @parallel(step: 4, type: SUM)

  # derived liquidity
  reserveUSD: BigDecimal! @parallel(step: 4)

  # volume
  volumeToken0: BigDecimal! @parallel(step: 4, type: SUM)
  volumeToken1: BigDecimal! @parallel(step: 4, type: SUM)

  # volume usd
  volumeUSD: BigDecimal!  @parallel(step: 4, type: SUM)

  # tx count
  txCount: BigInt! @parallel(step: 4, type: SUM)
}

# liquidity position
type LiquidityPosition @entity {
  id: ID!
  user: User! @parallel(step: 4)
  pair: Pair! @parallel(step: 4)
  liquidityTokenBalance: BigDecimal! @parallel(step: 4)
  snapshots: [LiquidityPositionSnapshot]! @derivedFrom(field: "liquidityPosition")
  block: Int! @parallel(step: 4)
  timestamp: Int! @parallel(step: 4)
}

# saved over time for return calculations, gets created and never updated
type LiquidityPositionSnapshot @entity {
  id: ID!
  liquidityPosition: LiquidityPosition! @parallel(step: 4)
  timestamp: Int! @parallel(step: 4) # saved for fast historical lookups
  block: Int! @parallel(step: 4) # saved for fast historical lookups
  user: User! @parallel(step: 4) # reference to user
  pair: Pair! @parallel(step: 4) # reference to pair
  token0PriceUSD: BigDecimal! @parallel(step: 4) # snapshot of token0 price
  token1PriceUSD: BigDecimal! @parallel(step: 4) # snapshot of token1 price
  reserve0: BigDecimal! @parallel(step: 4) # snapshot of pair token0 reserves
  reserve1: BigDecimal! @parallel(step: 4) # snapshot of pair token1 reserves
  reserveUSD: BigDecimal! @parallel(step: 4) # snapshot of pair reserves in USD
  liquidityTokenTotalSupply: BigDecimal! @parallel(step: 4, type: SUM) # snapshot of pool token supply
  # snapshot of users pool token balance
  liquidityTokenBalance: BigDecimal! @parallel(step: 4)
}

# transaction
type Transaction @entity {
  # transaction hash
  id: ID!
  blockNumber: BigInt! @parallel(step: 4)
  timestamp: BigInt! @parallel(step: 4)
  # This is not the reverse of Mint.transaction; it is only used to
  # track incomplete mints (similar for burns and swaps)
  mints: [Mint]!
  burns: [Burn]!
  swaps: [Swap]!
}

# mint
type Mint @entity {
  # transaction hash - index of mint in transaction mints array
  id: ID!
  transaction: Transaction! @parallel(step: 4)
  timestamp: BigInt! @parallel(step: 4) # need this to pull recent txns for specific token or pair
  pair: Pair! @parallel(step: 4)

  # populated from the primary Transfer event
  to: String! @parallel(step: 4)
  liquidity: BigDecimal! @parallel(step: 4)

  # populated from the Mint event
  sender: String @parallel(step: 4)
  amount0: BigDecimal @parallel(step: 4)
  amount1: BigDecimal @parallel(step: 4)
  logIndex: BigInt @parallel(step: 4)
  # derived amount based on available prices of tokens
  amountUSD: BigDecimal @parallel(step: 4)

  # optional fee fields, if a Transfer event is fired in _mintFee
  feeTo: String @parallel(step: 4)
  feeLiquidity: BigDecimal @parallel(step: 4)
}

# burn
type Burn @entity {
  # transaction hash - index of burn in transaction burns array
  id: ID!
  transaction: Transaction! @parallel(step: 4)
  timestamp: BigInt! @parallel(step: 4) # need this to pull recent txns for specific token or pair
  pair: Pair! @parallel(step: 4)

  # populated from the primary Transfer event
  liquidity: BigDecimal! @parallel(step: 4)

  # populated from the Burn event
  sender: String @parallel(step: 4)
  amount0: BigDecimal @parallel(step: 4)
  amount1: BigDecimal @parallel(step: 4)
  to: String @parallel(step: 4)
  logIndex: BigInt @parallel(step: 4)
  # derived amount based on available prices of tokens
  amountUSD: BigDecimal @parallel(step: 4)

  # mark uncomplete in ETH case
  complete: Boolean! @parallel(step: 4)

  # optional fee fields, if a Transfer event is fired in _mintFee
  feeTo: String @parallel(step: 4)
  feeLiquidity: BigDecimal @parallel(step: 4)
}

# swap
type Swap @entity {
  # transaction hash - index of swap in transaction swaps array
  id: ID!
  transaction: Transaction! @parallel(step: 4)
  timestamp: BigInt! @parallel(step: 4) # need this to pull recent txns for specific token or pair
  pair: Pair! @parallel(step: 4)

  # populated from the Swap event
  sender: String! @parallel(step: 4)
  amount0In: BigDecimal! @parallel(step: 4)
  amount1In: BigDecimal! @parallel(step: 4)
  amount0Out: BigDecimal! @parallel(step: 4)
  amount1Out: BigDecimal! @parallel(step: 4)
  to: String! @parallel(step: 4)
  logIndex: BigInt @parallel(step: 4)

  # derived info
  amountUSD: BigDecimal! @parallel(step: 4)
}
